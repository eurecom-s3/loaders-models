LOADREL ntkrnlmp

DEFINE FILESIZE 500

INPUT HEADER FILESIZE

#### Handy constant
P: zero <- INT 0 4

#### Alias for DosHeader
P: dosHdr <- HEADER as DOSHeader
#### NT Headers

P: ntHdr <- HEADER[dosHdr.e_lfanew, sizeof _IMAGE_NT_HEADERS] as _IMAGE_NT_HEADERS

#### Program Header
P: progHdr <- ntHdr.FileHeader as _IMAGE_FILE_HEADER

#### Optional Header
P: optHdr <- ntHdr.OptionalHeader as _IMAGE_OPTIONAL_HEADER

### Only useful for verification. Check that exe is smaller than 4GB
V1: ULE INT FILESIZE 8 0xffffffff term

P: fileSizePages <- SHR ADD (INT FILESIZE 4) 0xfff 12

# line 208
V2: AND EQ dosHdr.magic[0] "M" EQ dosHdr.magic[1] "Z" term

# line 216
V3: NOT OVFLADD dosHdr.e_lfanew 0xf8 term

# line 224
V4: ULE ADD dosHdr.e_lfanew 0xf8 FILESIZE term

# line 231
V5: UGT (ADD dosHdr.e_lfanew 0xf8) (SHL fileSizePages 12)

# line 261
V6(V5): ULT (ADD dosHdr.e_lfanew 0xf8) 0x1000 term


# line 289 -> call MiVerifyImageHeader
######## MiVerifyImageHeader
# line 19
V7: EQ ntHdr.Signature 0x4550 term

# line 22
V8: OR (NEQ progHdr.Machine 0) (NEQ progHdr.SizeOfOptionalHeader 0) term

# line 28
V9: EQ BITAND progHdr.Characteristics 2 2 term

# line 30
V10: EQ BITAND dosHdr.e_lfanew 3 0 term

# line 103
V11: EQ optHdr.Magic 0x10b term

# line 106
V12: OR (EQ BITAND optHdr.FileAlignment 0x1ff 0) (EQ optHdr.FileAlignment optHdr.SectionAlignment) term

# line 111
V13: NEQ optHdr.FileAlignment 0 term

# line 117
V14: ISPOW2 optHdr.SectionAlignment term

# line 122
V15: ISPOW2 optHdr.FileAlignment term

# line 127
V16: UGE optHdr.SectionAlignment optHdr.FileAlignment term

# line 133
V17: ULE optHdr.SizeOfImage 0x77000000 term

# line 139
V18: EQ progHdr.Machine 0x14c term

# line 144
V19: ULT optHdr.SizeOfHeaders optHdr.SizeOfImage term

# line 149
V20: EQ optHdr.ImageBase[0, 2] 0 term

# line 154
#V21: AND (NEQ progHdr.Machine 0x14C) (NEQ progHdr.Machine 0x8664)

# line 156
#V22(V21): NEq BITAND progHdr.Machine 1 1 term

# line 161
#V23(V21): EQ BITAND optHdr.DllCharacteristics 0x140 0x140 term

#V24(!V21): EQ BITAND optHdr.DllCharacteristics 0x1000 0x1000 term
######### End of MiVerifyImageHeader

# line 290
V25: NEQ (ADD (SHR optHdr.SizeOfImage 12) (BITAND optHdr.SizeOfImage 0xfff)) 0 term

# line 297 - 301
P: sizeNtHdr <- ADD progHdr.SizeOfOptionalHeader 24
P: sizeSectTable <- MUL progHdr.NumberOfSections 40
P: offEndHdrs <- ADD ADD sizeNtHdr sizeSectTable dosHdr.e_lfanew

# line 302
V26: UGT offEndHdrs dosHdr.e_lfanew term

# line 316
P: pageOffsetEndNtHdr <- BITAND (ADD dosHdr.e_lfanew sizeNtHdr) 0xfff

# line 318
P: pageOffsetEndSectTable <- ADD pageOffsetEndNtHdr sizeSectTable

# line 317 (first operand of the OR at line 320)
V27: NEq pageOffsetEndSectTable 0 term
V28: UGT (BITAND (ADD pageOffsetEndSectTable 0xfff) 0xFFFFF000) pageOffsetEndSectTable term

# line 342 (MiReadImageHeaders needs the starting address to be lower than FILESIZE). The bitand mask is to model ((x >> 12) << 12)
V29: ULT BITAND (ADD sizeNtHdr dosHdr.e_lfanew) 0xfffff000 FILESIZE term
# line 345 (cheks that the file is read at least up until the end of the section table, which means that this must be within the file ...)
V30: ULE pageOffsetEndSectTable FILESIZE term
# ... and within one page from the starting address
V31: ULT pageOffsetEndSectTable (ADD (BITAND (ADD sizeNtHdr dosHdr.e_lfanew) 0xfffff000) 0x1000) term


# line 357
V32: ULT optHdr.SectionAlignment 0x1000
# line 366... only x86 and x86_64 supported for sectionalign < 0x1000
V33(V32): OR (EQ progHdr.Machine 0x14C) (EQ progHdr.Machine 0x8664) term


## check total size of headers
P: sectTableSize <- MUL progHdr.NumberOfSections 40
P: totalSizeHdrs <- ADD progHdr.SizeOfOptionalHeader ADD sectTableSize ADD zero 0x18
V57: ULT totalSizeHdrs optHdr.SizeOfImage term
V58: ULE (ADD totalSizeHdrs dosHdr.e_lfanew) FILESIZE term


#### MiBuildImageControlArea
# line 45
P: nPagesImage <- SHR optHdr.SizeOfImage 12
V34: NEq BITAND optHdr.SizeOfImage 0xFFF 0
P(V34): nPagesImage <- ADD (SHR optHdr.SizeOfImage 12) 1
V35: NEq nPagesImage 0 term

P: stuff <- ADD optHdr.SizeOfHeaders SUB optHdr.SectionAlignment 1
P: nPagesHeaders <- ADD (SHR (ADD (BITAND (BITAND stuff (BITNOT SUB optHdr.SectionAlignment 1)) 0xFFF) 0xFFF) 12) (BITAND (SHR (BITNOT SUB optHdr.SectionAlignment 1) 12) (SHR stuff 12))

# line 174
V36(!V32): AND (NEQ optHdr.SizeOfHeaders 0) (UGT stuff optHdr.SizeOfHeaders) term
V37(!V32): ULE nPagesHeaders nPagesImage term

#### MiParseImageSectionHeaders
P: offSectTable <- ADD sizeNtHdr dosHdr.e_lfanew
P: nSect <- progHdr.NumberOfSections

# line 110
V38(!V32): NEq nSect 0 term

# Calculated before calling the function (line 188 of MiCreateControlArea)
P(!V32): remainingPages <- SUB nPagesImage nPagesHeaders

# line 99
P(!V32): startOfNextSect <- ADD optHdr.ImageBase (SHL nPagesHeaders 12)

G1: ULE nSect 5 term
L1: section <- LOOP(HEADER, offSectTable, 40, nSect, 5) AS _IMAGE_SECTION_HEADER
  # Common to both branch of the SectionAlingment < 0x1000
  # lines 73 & 127
  P: sectSize <- section.VirtualSize
  V381: EQ section.VirtualSize 0
  P(V381): sectSize <- section.SizeOfRawData

  # line 80
  V39(V32): NOT OVFLADD section.SizeOfRawData section.PointerToRawData term
  V40(V32): AND (EQ section.PointerToRawData section.VirtualAddress) (ULE sectSize section.SizeOfRawData) term

  # line 131
  P: parsedPtrRawData <- section.PointerToRawData
  V41(!V32): EQ section.SizeOfRawData 0
  P(V41): parsedPtrRawData <- INT 0 4

  # line 140
  V42(!V32): UGE ADD parsedPtrRawData section.SizeOfRawData parsedPtrRawData term

  # line 145
  V43(!V32): NEq sectSize 0 term

  P: VA <- ADD optHdr.ImageBase section.VirtualAddress
  V44(!V32): EQ VA startOfNextSect term
  P(!V32): startOfNextSect <- ADD startOfNextSect (ALIGNUP sectSize optHdr.SectionAlignment)
  V45(!V32): UGT (ADD sectSize SUB optHdr.SectionAlignment 1) sectSize term

  P(!V32): nPagesSect <- SHR ALIGNUP sectSize optHdr.SectionAlignment 12
  V46(!V32): ULE nPagesSect remainingPages term

  P(!V32): remainingPages <- SUB remainingPages nPagesSect

  # line 185
  P: endRawData <- ADD section.SizeOfRawData section.PointerToRawData
  V47(!V32): UGE ALIGNUP endRawData optHdr.FileAlignment section.PointerToRawData term

END L1

# line 115
V48(!V32): ULT remainingPages (SHR optHdr.SectionAlignment 12) term

# line 110 (reached the second time after the loop, coming from line 282)
V49(!V32): ULE endRawData FILESIZE term

#### PspAllocateProcess
G6: OR (EQ optHdr.DataDirectory[16, 8] 0) (ULE optHdr.NumberOfRvaAndSizes 3) term

#### CreateProcessInternal:1429
V50: OR EQ optHdr.Subsystem 2 EQ optHdr.Subsystem 3 term

#### BasepCheckImageVersion
P: majorSub <- optHdr.MajorSubsystemVersion
P: minorSub <- optHdr.MinorSubsystemVersion
P: majminSub <- optHdr[48, 4]
P: maxSub <- INT 0x0a00 4
V51: OR (UGT majorSub 3) (AND (EQ majorSub 3) (UGE minorSub 0xa)) term
V52: OR (ULT majorSub 0xa) (AND (EQ majorSub 0xa) (EQ minorSub 0)) term

# MmCreatePeb
## This function, among other things, dereferences some fields
## in the LOAD_CONFIG directory
P: loadConfigDir <- optHdr.DataDirectory[80, 8] as _IMAGE_DATA_DIRECTORY
P: loadConfigVA <- loadConfigDir.VirtualAddress
V53: Eq BITAND loadConfigVA 3 0 term
P: loadConfig <- HEADER[loadConfigVA, 0x40] as _IMAGE_LOAD_CONFIG_DIRECTORY
V54: ULT (ADD loadConfigVA 0x40) optHdr.SizeOfImage term

# Make sure that the headers are copied in memory after mapping
V55(!V32): UGE optHdr.SizeOfHeaders (ADD dosHdr.e_lfanew 0x5d) term

#### MiRelocateImage: checks that the relocation directory lies within the file
P: relocDir <- optHdr.DataDirectory[40, 8] as _IMAGE_DATA_DIRECTORY
P: relocVA <- relocDir.VirtualAddress
P: relocSize <- relocDir.Size
V56: UGE optHdr.NumberOfRvaAndSizes 5
G5(V56): AND (ULE relocSize FILESIZE) (ULT ADD relocVA relocSize FILESIZE) term

### makes sure this is not marked as a DLL
V59: Eq (BITAND progHdr.Characteristics 0x2000) 0 term
