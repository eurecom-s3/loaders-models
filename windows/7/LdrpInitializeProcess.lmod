LOADREL ntkrnlmp

DEFINE FILESIZE 500
INPUT HEADER FILESIZE as DOSHeader

P: NT_HEADER <- HEADER[HEADER.e_lfanew, sizeof _IMAGE_NT_HEADERS] as _IMAGE_NT_HEADERS
P: fileHdr <- NT_HEADER.FileHeader as _IMAGE_FILE_HEADER
P: optHdr <- NT_HEADER.OptionalHeader as _IMAGE_OPTIONAL_HEADER
P: imageEnd <- ADD optHdr.ImageBase optHdr.SizeOfImage
P: nSections <- fileHdr.NumberOfSections
P: sectionTableOffset <- ADD HEADER.e_lfanew (ADD fileHdr.SizeOfOptionalHeader 24)

## Needs relocation?
V1: UGE optHdr.ImageBase 0x70000000

### LdrpProtectAndRelocateImage -> LdrpSetProtection
#### If the image is relocated, each section is unprotected to apply relocations. This means that if the sections are not mapped (e.g., their VA is beyond ImageBase+SizeOfImage,) they must be RW- so their permission are not updated, causing a conflicting address error to be raised.

G1: ULE nSections 5 term
G99: NEq nSections 0 term
P: defaultNewBase <- INT 0x10000 4
L1(V1): section <- LOOP(HEADER, sectionTableOffset, 40, nSections, 5) AS _IMAGE_SECTION_HEADER
    P: size <- section.SizeOfRawData
    P: VA <- section.VirtualAddress
    P: endSect <- ADD ADD optHdr.ImageBase VA (ALIGNUP size optHdr.SectionAlignment)
    P: charact <- section.Characteristics
    V2: OR (AND (UGT endSect imageEnd) (NEq size 0)) (UGT ADD defaultNewBase VA 0x80000000)
    V3(V2): EQ (BITAND charact[3] 0x80) 0x80 term
END L1

### LdrpLoadDll
#### The image should end before 0x70000000 because the area beyond that address is reserved for libraries. This means that is the image is relocated (to address 0x10000,) SizeOfImage shold be less than 0x70000000-0x10000. Otherwise ImageBase+SizeOfImage < 0x70000000
V4(V1): ULT optHdr.SizeOfImage 0x6fff0000 term
V5(!V1): ULT imageEnd 0x70000000 term

### LdrpInitializeTls
#### If the directory is defined it must lay inside the image
P: tlsDir <- optHdr.DataDirectory[72, 8] as _IMAGE_DATA_DIRECTORY
P: tlsDirEnd <- ADD tlsDir.VirtualAddress tlsDir.Size
V6: AND (UGT optHdr.NumberOfRvaAndSizes 9) (NEq tlsDir.VirtualAddress 0)
V7(V6): UGT (SUB 0xffffffff tlsDir.VirtualAddress) tlsDir.Size term
V8(V6): ULE tlsDirEnd imageEnd term
G21: OR (ULE optHdr.NumberOfRvaAndSizes 9) (Eq tlsDir 0) term


### Relocations
#### They come into play only if the image needs to be relocated.
#### This means that the ImageBase is either 0 or in the range of other DLLs
V9: OR (Eq optHdr.ImageBase 0) (UGE optHdr.ImageBase 0x80000000)

P: relocDir <- optHdr.DataDirectory[40, 8] as _IMAGE_DATA_DIRECTORY
P: relocVA <- relocDir.VirtualAddress
P: relocSize <- relocDir.Size
G7: ULT relocSize 0x100 term

#### LdrRelocateImageWithBias:32
V10(V9): AND (UGE optHdr.NumberOfRvaAndSizes 6) (AND NEq relocVA 0 NEq relocSize 0)

### If the image is relocated, but doesn't have the reloc table, check that it wasn't stripped away, in which case the image is invalid
#### LdrRelocateImageWithBias:55
V11(V9, !V10): Eq BITAND fileHdr.Characteristics 0x1 0 term

P: tmpSize <- relocSize
P(V10): loopStart <- relocVA
L2(V10): relocBlockAddr <- VLOOP(loopStart, nextBlockAddr, V99, 1)
    P: relocBlock <- HEADER[relocBlockAddr, 8]
    P: blockSize <- relocBlock[4, 4]
    P: blockPage <- relocBlock[0, 4]
    G6: ULT blockPage 2 term
    P: firstEntryAddr <- ADD relocBlockAddr 8
    P: nEntry <- SHR (SUB blockSize 8) 1
    P: tmpSize <- SUB tmpSize blockSize
    P: nextBlockAddr <- ADD relocBlockAddr blockSize
    V99: NEQ tmpSize 0

    P: tmpEntry <- INT 0 4
    V96: UGE nEntry 1
    L3(V96): entryAddr <- VLOOP(firstEntryAddr, nextBAddr, V98, 1)
        P: entry <- HEADER[entryAddr, 2]
        P: tmpEntry <- ADD tmpEntry 1
        P: nextBAddr <- ADD entryAddr 2

        P: relocType <- SHR BITAND entry[1] 0xf0 4
        P: relocAddr <- BITAND entry 0xfff

        V12: AND ULE relocType 10 NEq relocType 8 term
        V13: ULT ADD blockPage relocAddr imageEnd term
	G13: ULT ADD blockPage relocAddr FILESIZE term

	## LdrRelocateImageWithBias:47
	### Checks that the RtlImageNtHeader is still valid
	### Meaning that the targeted addre can't be 0x0 or 0x1...
	V15: OR (EQ relocType 0) AND (NEQ relocAddr 0) (NEQ relocAddr 1) term
	### Can't overlap with e_lfanew (0x3f-0x40)
	V16: OR (ULT relocAddr 0x3f) (UGT relocAddr 0x40) term
	### Cant' overlap with PE magic (e_lfanew-e_lfanew+4)
	V17: OR (ULT relocAddr HEADER.e_lfanew) (UGT relocAddr ADD HEADER.e_lfanew 4) term

        ## RelocType 4 uses two entries instead of 1
        V14: Eq relocType 4
        P(V14): tmpEntry <- ADD tmpEntry 1
        P(V14): nextBAddr <- ADD nextBAddr 2

        V98: ULE tmpEntry nEntry
    END L3
    V97: EQ tmpEntry nEntry term
END L2

G4: EQ tmpSize 0 term

### LdrpCheckForSafeDiscImage
#### Implicit constraints due to dereferencing fields in the headers
#### GT, not UGT
V15: GT SUB optHdr.SizeOfHeaders 0x2c 0 term
V16: ULT ADD optHdr.SizeOfHeaders 0x13 FILESIZE term

### LdrpCheckForSecuROMImage
#### Other implicit constraints, like the one above
P: debugDir <- optHdr.DataDirectory[48, 8] as _IMAGE_DATA_DIRECTORY
P: debugVA  <- debugDir.VirtualAddress
P: debugSize <- debugDir.Size
P: nDebugEntry <- UDIV debugSize 28
V17: AND ULT optHdr.SectionAlignment 0x1000 NEq debugSize 0
G18: ULE nDebugEntry 5 term
L4(V17): debugEntry <- LOOP(HEADER, debugVA, 0x1c, nDebugEntry, 5) as _IMAGE_DEBUG_DIRECTORY
    P: dbgEntrySize <- debugEntry.SizeOfData
    P: dbgPtrData <- debugEntry.PointerToRawData
    V19: ULT (ADD dbgEntrySize dbgPtrData) FILESIZE term
END L4

#### LdrpCheckForSecuROMImage also checks that the certificate entry lies within the file. We do not support it for generation (it would need to create a valida certificate (which is impossible ofc)
P: certDir <- optHdr.DataDirectory[32, 8] as _IMAGE_DATA_DIRECTORY
P: certDirVA <- certDir.VirtualAddress
P: certDirSize <- certDir.Size
G20: EQ certDir 0 term
V21: ULT (ADD certDirSize certDirVA) FILESIZE term
