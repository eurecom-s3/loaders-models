LOADREL ntkrnlmp

DEFINE FILESIZE 500

INPUT HEADER FILESIZE as DOSHeader

#### Handy constant
P: zero <- INT 0 4

V1: AND EQ HEADER.magic[0] "M" EQ HEADER.magic[1] "Z" term
V2: ULE (ADD HEADER.e_lfanew 0xf8) FILESIZE term

# MiVerifyImageHeader
P: NT_HEADER <- HEADER[HEADER.e_lfanew, sizeof _IMAGE_NT_HEADERS] as _IMAGE_NT_HEADERS
V3: EQ NT_HEADER.Signature 0x4550  term

#### Start of MiVerifyImageHeader
P: progHeader <- NT_HEADER.FileHeader as _IMAGE_FILE_HEADER
V4: OR (NEq progHeader.Machine 0) (NEq progHeader.SizeOfOptionalHeader 0) term

V6: NEq (BITAND progHeader.Characteristics 2) 0 term
V7: Eq (BITAND HEADER.e_lfanew 3) 0 term

P: optHdr <- NT_HEADER.OptionalHeader as _IMAGE_OPTIONAL_HEADER
V8: Eq optHdr.Magic 0x10b term

V9: OR (EQ (BITAND optHdr.FileAlignment 0x1ff) 0) (EQ optHdr.SectionAlignment optHdr.FileAlignment) term
V10: NEq optHdr.FileAlignment 0 term
V11: ISPOW2 optHdr.SectionAlignment term
V12: ISPOW2 optHdr.FileAlignment term
V13: UGE optHdr.SectionAlignment optHdr.FileAlignment term
V14: ULE optHdr.SizeOfImage 0x77000000 term
V16: Eq progHeader.Machine 0x14c term
#### End of MiVerifyImageHeader

## MiCreateImageFileMap:292
V17: ULT optHdr.SizeOfHeaders optHdr.SizeOfImage term

V18: NEq 0 ADD (SHR optHdr.SizeOfImage 12) (BITAND optHdr.SizeOfImage 0xfff) term

V19: Eq 0 BITAND optHdr.ImageBase 0xffff term

## MiCreateImageFileMap:324
P: sectTableSize <- MUL progHeader.NumberOfSections 40
P: totalSizeHdrs <- optHdr.SizeOfHeaders
P: sizeHdrsSect <- ADD ADD ADD progHeader.SizeOfOptionalHeader 0x18 sectTableSize (BITAND  HEADER.e_lfanew 0xfff)
V121: ULT optHdr.SizeOfHeaders sizeHdrsSect
P(V121): totalSizeHdrs <- sizeHdrsSect
V20: ULT totalSizeHdrs optHdr.SizeOfImage term

### MiCreateImageFileMap:370
P: tmpV36 <- ADD ADD progHeader.SizeOfOptionalHeader 0x18 HEADER.e_lfanew
P: tmpV37 <- ADD (BITAND tmpV36 0xfff) (MUL progHeader.NumberOfSections 40)
V98: ULE tmpV37 FILESIZE term

## Start of MiBuildImageControlArea
### line 51
P: nPages <- SHR optHdr.SizeOfImage 12
V21: NEq (BITAND optHdr.SizeOfImage 0xfff) 0
P(V21): nPages <- Add nPages 1

V25: UGE optHdr.SectionAlignment 0x1000
G56: ULE optHdr.SectionAlignment 0x20000 term

### line 139
V22(V25): NEq optHdr.SizeOfHeaders 0 term
### line 142
P(V25): lastByteInHeaderSection <- ADD optHdr.SectionAlignment (SUB optHdr.SizeOfHeaders 1)
### needs to be checked
V23(V25): UGT lastByteInHeaderSection optHdr.SizeOfHeaders term

### line 145
P: nPagesHdrs <- ADD (BITAND (SHR lastByteInHeaderSection 12) (SHR (BITNOT (SUB optHdr.SectionAlignment 1)) 12)) (SHR (ADD (BITAND (BITAND optHdr.SectionAlignment (BITNOT (SUB optHdr.SectionAlignment 1))) 0xfff) 0xfff) 12)
V24(V25): ULE nPagesHdrs nPages term
P: nPagesSections <- SUB nPages nPagesHdrs

## Start of MiParseImageSectionHeaders
### line 60 (should be very much the same also for line 226)
P: sectionTableOffset <- ADD HEADER.e_lfanew (ADD progHeader.SizeOfOptionalHeader 24)
P: nSections <- progHeader.NumberOfSections


G26(V25): NEq nSections 0 term
P: tmpNpages <- nPagesSections
P: lastSectionEnd <- ADD optHdr.ImageBase MUL nPagesHdrs 4096

L1: section <- LOOP(HEADER, sectionTableOffset, 40, nSections, 5) AS _IMAGE_SECTION_HEADER

    P: sectChar <- section.Characteristics
    ### Line 62
#    V27(V25): AND (Eq BITAND sectChar[3] 0x10 0x10) (OR (EQ (BITAND sectChar[3] 0x20) 0) (LT sectChar 0)) term
    P: sectionSize <- section.VirtualSize


    ### This is equal, independently from sectionAlignement
    V28: Eq section.VirtualSize 0
    P(V28): sectionSize <- section.SizeOfRawData
    V29: UGE (ADD section.PointerToRawData section.SizeOfRawData) section.SizeOfRawData term

    ### temp
    G99: ULT sectionSize 0xf0000 term

    ### Line 87
    V30(V25): AND (Eq lastSectionEnd (ADD optHdr.ImageBase section.VirtualAddress)) (NEq sectionSize 0) term

    ### Line 94
    P(V25): sizePlusAlign <- (ADD optHdr.SectionAlignment (SUB sectionSize 1))
    V31(V25): UGT sizePlusAlign sectionSize term

    ### line 101
    P(V25): nPtes <- BITAND (SHR sizePlusAlign 12) (SHR (BITNOT (SUB optHdr.SectionAlignment 1)) 12)
    V32(V25): ULE nPtes tmpNpages term
    P(V25): tmpNpages <- SUB tmpNpages nPtes

    ### line 118
    P(V25): alignedEnd <- ADD section.PointerToRawData (ALIGNUP section.SizeOfRawData  optHdr.FileAlignment)
    V33(V25): UGE alignedEnd section.PointerToRawData term

    ### Check these
#    V101(V25): EQ BITAND section.PointerToRawData (SUB optHdr.FileAlignment 1) 0 term
#    V102(V25): EQ BITAND section.SizeOfRawData (SUB optHdr.FileAlignment 1) 0 term
    V103(V25): ULT section.PointerToRawData FILESIZE term
    V104(V25, V28): ULE ADD section.PointerToRawData section.SizeOfRawData FILESIZE term

    ### line 193
    P(V25): lastSectionEnd <- ADD lastSectionEnd MUL nPtes 4096

    P(V25): endOfRawData <- ADD section.SizeOfRawData section.PointerToRawData
    ### avoid overflow when adding
    V34(V25): NOT OVFLADD section.SizeOfRawData section.PointerToRawData term

   ### line 227 - reach here only if sectionAlignment is < 0x1000
   V35(!V25): AND (EQ section.PointerToRawData section.VirtualAddress) (ULE sectionSize section.SizeOfRawData) term

END L1

V36(V25): ULE endOfRawData FILESIZE term
V37(V25): ULT tmpNpages (SHR optHdr.SectionAlignment 12) term

## End of MiParseImageSectionHeaders
## End of MiBuildImageControlArea

### All the other failure conditions in MiCreateImageFileMap depend on IO
## End of MiCreateImageFileMap

### LdrResSearchResource: line 18
V38: NEq optHdr.ImageBase 0 term

### The following avoid the image to be relocate
#V39: Eq BITAND optHdr.ImageBase 0xff000000 0 term
#V40: Eq BITAND optHdr.SizeOfImage 0xfff00000 0 term

### Avoid sections witouth constraints
G41: ULE nSections 5 term

# CreateProcessInternalW:829
V42: OR EQ optHdr.Subsystem 2 EQ optHdr.Subsystem 3 term

# BasepCheckImageVersion
V43: AND AND AND (UGE optHdr.MajorSubsystemVersion 3) (OR (NEq optHdr.MajorSubsystemVersion 3) (UGE optHdr.MinorSubsystemVersion 0xa)) (ULE optHdr.MajorSubsystemVersion 6) (OR (NEq optHdr.MajorSubsystemVersion 6) (ULE optHdr.MinorSubsystemVersion 1)) term

# MmCreatePeb
## This function, among other things, dereferences some fields
## in the LOAD_CONFIG directory
P: loadConfigDir <- optHdr.DataDirectory[80, 8] as _IMAGE_DATA_DIRECTORY
P: loadConfigVA <- loadConfigDir.VirtualAddress
V44: Eq BITAND loadConfigVA 3 0 term
P: loadConfig <- HEADER[loadConfigVA, 0x40] as _IMAGE_LOAD_CONFIG_DIRECTORY
V45: ULT (ADD loadConfigVA 0x40) optHdr.SizeOfImage term

# Makes sure that all the headers are copied in memory
### this may not be correct
V46(V25): UGE optHdr.SizeOfHeaders (ADD HEADER.e_lfanew 0x5d) term
#V46: EQ optHdr.SizeOfHeaders (ADD sectionTableOffset sectTableSize) term


# PspAllocateProcess:245
### Checks that the header is not marked as DLL
V47: Eq (BITAND progHeader.Characteristics 0x2000) 0 term

# SeValidateImageHeader
### Check hash if FORCE_INTEGRITY bit is set
G48: EQ (BITAND optHdr.DllCharacteristics 0x80) 0 term